generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  roles     Role[]
  name      String?
  status    String   @default("active")

  Member        Member[]
  Education     Education?
  careerJourney careerJourney?
  Achievement   Achievement?
  Contact       Contact?

  @@map("users")
}

model BlogPost {
  id      Int      @id @default(autoincrement())
  title   String
  excerpt String
  content String
  date    DateTime @default(now())
  tags    String[]

  @@map("blog_posts")
}

model Portfolio {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String?
  phone       String?

  @@map("portfolios")
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String
  userRoles   UserRole[] @relation("RolePermissions")

  @@map("permissions")
}

model UserRole {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  createdAt   DateTime     @default(now())
  permissions Permission[] @relation("RolePermissions")

  @@map("user_role")
}

model Member {
  id                 Int             @id @default(autoincrement())
  slug               String          @unique
  name               String
  userId             Int?            @unique
  user               User?           @relation(fields: [userId], references: [id])
  image              String?
  role               String?
  relationship       String?
  spouseName         String?
  children           String?
  fullBio            String?
  email              String?
  phone              String?
  address            String?
  ancestorsHierarchy String[]
  career             Json?
  skills             Json?
  contactInfo        Json?
  languages          Json?
  hobbies            Json?
  citizenshipNo      String?
  description        String?
  personality        Json
  achievements       Json
  Education          Education[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  Achievement        Achievement[]
  careerJourney      careerJourney[]

  @@map("members")
}

model Achievement {
  id       Int   @id @default(autoincrement())
  user     User? @relation(fields: [userId], references: [id])
  userId   Int?  @unique
  memberId Int

  title            String
  date             DateTime?
  organizationName String?

  description String?
  position    String?
  Member      Member  @relation(fields: [memberId], references: [id])

  @@map("achievements")
}

model Education {
  id           Int     @id @default(autoincrement())
  title        String
  schoolName   String?
  uniName      String?
  description  String?
  degree       String?
  fieldOfStudy String?
  startYear    Int?
  endYear      Int?
  faculty      String?
  activities   String?
  skills       String?
  memberId     Int
  Member       Member  @relation(fields: [memberId], references: [id])
  userId       Int?    @unique
  user         User?   @relation(fields: [userId], references: [id])

  @@map("educations")
}

model Contact {
  id     Int   @id @default(autoincrement())
  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  name      String
  email     String[]
  phone     String[]
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])
  createdAt DateTime @default(now())

  @@map("contacts")
}

model careerJourney {
  id                Int       @id @default(autoincrement())
  title             String
  description       String
  startDate         DateTime
  endDate           DateTime?
  memberId          Int
  Member            Member    @relation(fields: [memberId], references: [id])
  positionIncompany String?
  skills            String[]
  careerType        String
  location          String?
  locationType      Json?
  userId            Int?      @unique
  user              User?     @relation(fields: [userId], references: [id])

  @@map("career_journeyies")
}

model FamilyDetails {
  id       Int @id @default(autoincrement())
  memberId Int

  name         String
  relationship String[]

  description String?

  @@map("family_details")
}

model Address {
  id        Int       @id @default(autoincrement())
  permanent String
  temporary String?
  Contact   Contact[]

  @@map("addresses")
}

enum Role {
  ADMIN
  USER

  @@map("roles")
}
